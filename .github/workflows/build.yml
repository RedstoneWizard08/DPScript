on: [push]
name: build

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            windows: false
          - target: aarch64-unknown-linux-gnu
            windows: false
          - target: arm-unknown-linux-gnueabi
            windows: false
          - target: arm-unknown-linux-gnueabihf
            windows: false
          - target: x86_64-unknown-linux-musl
            windows: false
          - target: aarch64-unknown-linux-musl
            windows: false
          - target: arm-unknown-linux-musleabi
            windows: false
          - target: arm-unknown-linux-musleabihf
            windows: false
          - target: x86_64-apple-darwin
            windows: false
          - target: aarch64-apple-darwin
            windows: false
          - target: x86_64-pc-windows-gnu
            windows: true
            prefix: x86_64-w64-mingw32
          - target: i686-pc-windows-gnu
            windows: true
            prefix: i686-w64-mingw32
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update

          sudo apt-get install -y \
            gcc \
            clang \
            build-essential \
            mingw-w64-x86-64-dev \
            mingw-w64-i686-dev \
            gcc-mingw-w64-x86-64 \
            gcc-mingw-w64-i686

          mkdir -p ~/.zig

          curl -fsSL \
            "https://ziglang.org/builds/zig-linux-$(uname -m)-0.13.0-dev.46+3648d7df1.tar.xz" | \
            tar -xJ -C ~/.zig --strip-components 1

          chmod a+rx ~/.zig/zig
          sudo ln -sf ~/.zig/zig /usr/local/bin/zig

      - name: Cache
        uses: actions/cache@v4
        env:
          cache-name: rust-cache
        with:
          path: |
            ~/.cargo
            ~/.rustup
            target
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.target }}-
            ${{ runner.os }}-build-${{ matrix.target }}-
            ${{ runner.os }}-${{ matrix.target }}-

      - name: Install Rust toolchain
        run: |
          rustup update --no-self-update nightly
          rustup component add --toolchain nightly rustfmt rust-src
          rustup default nightly

          rustup target add ${{ matrix.target }}

      - name: Install cargo-binstall
        uses: cargo-bins/cargo-binstall@main

      - name: Install cargo-zigbuild
        run: |
          cargo binstall cargo-zigbuild -y

      - name: Install cross
        run: |
          cargo binstall cross -y

      - name: Build
        if: matrix.windows != true
        run: |
          cargo zigbuild --target ${{ matrix.target }}
          cargo zigbuild --release --target ${{ matrix.target }}

          mkdir bin

          cp -v target/${{ matrix.target }}/debug/dsc bin/dsc-debug
          cp -v target/${{ matrix.target }}/release/dsc bin/dsc

      - name: Build (windows)
        if: matrix.windows == true
        run: |
          export RUSTFLAGS="-L/usr/${{ matrix.prefix }}/lib"
              
          cargo zigbuild --target ${{ matrix.target }}
          cargo zigbuild --release --target ${{ matrix.target }}

          mkdir bin

          cp -v target/${{ matrix.target }}/debug/dsc bin/dsc-debug
          cp -v target/${{ matrix.target }}/release/dsc bin/dsc

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.target }}
          path: bin/*
