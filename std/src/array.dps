module std/array;

import std/core/{
    set_data,
    get_data,
    keyof,
    storeof,
};

import std/core/stores/arrayLength;
import std/core/players/temp;

objective tempArrayLength: dummy = "__dpscript_tmp_array_add_length";
objective tempArrayPos: dummy = "__dpscript_tmp_array_add_pos";
objective tempInputLen: dummy = "__dpscript_tmp_array_input_len";
objective tempOutputLen: dummy = "__dpscript_tmp_array_output_len";

pub fn array_add(arr: NBT[], add: NBT) {
    const stor = storeof(arr);
    const key = keyof(arr);
    const pat = path: "{store}/{key}";
    
    tempArrayLength.set(temp, arrayLength.get(pat));

    stor.append(key, add);
    
    tempArrayLength.add(temp, 1);

    arrayLength.set(pat, tempArrayLength.get(temp));
}

pub fn array_add_all(arr: NBT[], add: NBT[]) {
    const stor = storeof(arr);
    const key = keyof(arr);
    const pat = path: "{stor}/{key}";

    const addStore = storeof(add);
    const addKey = keyof(add);
    const addPath = path: "{addStore}/{addKey}";
    
    tempArrayLength.set(temp, arrayLength.get(pat));
    tempOutputLen.set(temp, arrayLength.get(pat));
    tempInputLen.set(temp, arrayLength.get(addPath));
    tempArrayPos.set(temp, 0);

    let arrCopy = arr.cloneToTemp();
    let addCopy = add.cloneToTemp();

    array_add_all_sub(arrCopy, addCopy);
    stor.set(key, arrCopy);

    tempArrayLength.reset(temp);
    tempArrayPos.reset(temp);

    tempOutputLen.operation(ScoreboardOps::Add, temp, tempInputLen, temp);

    arrayLength.set(pat, tempOutputLen.get(temp));

    tempOutputLen.reset(temp);
    tempInputLen.reset(temp);
}

fn array_add_all_sub(arr: NBT[], add: NBT[]) {
    let addKey = keyof(add);
    let s1 = storeof(arr);
    let s2 = storeof(add);
    
    s1.append(keyof(arr), add[0]);
    s2.remove("{addKey}[0]");

    tempArrayPos.add(temp, 1);

    if tempArrayPos.lessThan(temp, tempArrayLength, temp) {
        array_add_all_sub(arr, add);
    }
}
